import prisma from '../prismadb';

export interface PromotionSuggestion {
  id: string;
  type: 'PRODUCT_VOUCHER' | 'CATEGORY_PROMOTION' | 'STOCK_CLEARANCE';
  priority: 'HIGH' | 'MEDIUM' | 'LOW';
  title: string;
  description: string;
  suggestedAction: string;
  data: {
    productId?: string;
    productName?: string;
    categoryId?: string;
    categoryName?: string;
    currentStock?: number;
    daysWithoutSale?: number;
    viewCount?: number;
    avgCategoryPrice?: number;
    suggestedDiscount?: number;
    reasoning: string[];
  };
}

export class PromotionSuggestionEngine {
  private static instance: PromotionSuggestionEngine;

  public static getInstance(): PromotionSuggestionEngine {
    if (!PromotionSuggestionEngine.instance) {
      PromotionSuggestionEngine.instance = new PromotionSuggestionEngine();
    }
    return PromotionSuggestionEngine.instance;
  }

  // Ph√¢n t√≠ch v√† t·∫°o g·ª£i √Ω khuy·∫øn m√£i
  public async generateSuggestions(): Promise<PromotionSuggestion[]> {
    const suggestions: PromotionSuggestion[] = [];

    try {
      console.log('üöÄ Starting promotion analysis...');

      // 1. Ph√¢n t√≠ch s·∫£n ph·∫©m t·ªìn kho cao
      console.log('üì¶ Analyzing high stock products...');
      const highStockSuggestions = await this.analyzeHighStockProducts();
      console.log(`Found ${highStockSuggestions.length} high stock suggestions`);
      suggestions.push(...highStockSuggestions);

      // 2. Ph√¢n t√≠ch s·∫£n ph·∫©m √≠t b√°n
      console.log('üìâ Analyzing low sales products...');
      const lowSalesSuggestions = await this.analyzeLowSalesProducts();
      console.log(`Found ${lowSalesSuggestions.length} low sales suggestions`);
      suggestions.push(...lowSalesSuggestions);

      // 3. Ph√¢n t√≠ch danh m·ª•c c√≥ hi·ªáu su·∫•t th·∫•p
      console.log('üè∑Ô∏è Analyzing low performing categories...');
      const categorySuggestions = await this.analyzeLowPerformingCategories();
      console.log(`Found ${categorySuggestions.length} category suggestions`);
      suggestions.push(...categorySuggestions);

      // 4. S·∫Øp x·∫øp theo ƒë·ªô ∆∞u ti√™n
      const sortedSuggestions = this.prioritizeSuggestions(suggestions);

      console.log(`‚úÖ Generated ${sortedSuggestions.length} total suggestions`);
      return sortedSuggestions;
    } catch (error) {
      console.error('‚ùå Error generating promotion suggestions:', error);
      return [];
    }
  }

  // Ph√¢n t√≠ch s·∫£n ph·∫©m t·ªìn kho cao
  private async analyzeHighStockProducts(): Promise<PromotionSuggestion[]> {
    const suggestions: PromotionSuggestion[] = [];

    try {
      // L·∫•y s·∫£n ph·∫©m c√≥ t·ªìn kho > 50
      const highStockProducts = await prisma.product.findMany({
        where: {
          inStock: {
            gt: 50
          }
        },
        include: {
          category: true
        },
        orderBy: {
          inStock: 'desc'
        },
        take: 10
      });

      for (const product of highStockProducts) {
        // Mock data cho s·ªë ng√†y kh√¥ng b√°n (v√¨ orderItem table ch∆∞a c√≥)
        const daysWithoutSale = Math.floor(Math.random() * 90) + 10; // Random 10-100 ng√†y

        // T√≠nh discount ƒë·ªÅ xu·∫•t d·ª±a tr√™n t·ªìn kho v√† th·ªùi gian
        let suggestedDiscount = 10; // Base discount
        if (product.inStock > 100) suggestedDiscount += 5;
        if (daysWithoutSale > 30) suggestedDiscount += 10;
        if (daysWithoutSale > 60) suggestedDiscount += 5;

        const priority = this.calculatePriority(product.inStock, daysWithoutSale);

        suggestions.push({
          id: `high-stock-${product.id}`,
          type: 'STOCK_CLEARANCE',
          priority,
          title: `Gi·∫£i ph√≥ng t·ªìn kho: ${product.name}`,
          description: `S·∫£n ph·∫©m c√≥ t·ªìn kho cao (${product.inStock} s·∫£n ph·∫©m) v√† ${daysWithoutSale} ng√†y kh√¥ng b√°n`,
          suggestedAction: `T·∫°o voucher gi·∫£m ${suggestedDiscount}% cho s·∫£n ph·∫©m n√†y`,
          data: {
            productId: product.id,
            productName: product.name,
            categoryId: product.categoryId,
            categoryName: 'Category Name', // Mock data
            currentStock: product.inStock,
            daysWithoutSale,
            suggestedDiscount,
            reasoning: [
              `T·ªìn kho cao: ${product.inStock} s·∫£n ph·∫©m`,
              `${daysWithoutSale} ng√†y kh√¥ng c√≥ ƒë∆°n h√†ng`,
              `C·∫ßn gi·∫£i ph√≥ng t·ªìn kho ƒë·ªÉ tr√°nh ·ª© ƒë·ªçng v·ªën`,
              `Gi·∫£m gi√° c√≥ th·ªÉ k√≠ch th√≠ch nhu c·∫ßu mua`
            ]
          }
        });
      }
    } catch (error) {
      console.error('Error analyzing high stock products:', error);
    }

    return suggestions;
  }

  // Ph√¢n t√≠ch s·∫£n ph·∫©m √≠t b√°n
  private async analyzeLowSalesProducts(): Promise<PromotionSuggestion[]> {
    const suggestions: PromotionSuggestion[] = [];

    try {
      // L·∫•y s·∫£n ph·∫©m c√≥ √≠t ƒë∆°n h√†ng trong 30 ng√†y qua
      const thirtyDaysAgo = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);

      const products = await prisma.product.findMany({
        include: {
          category: true
        },
        take: 8
      });

      // Mock data cho low sales products
      const lowSalesProducts = products.filter(product => product.inStock > 10);

      for (const product of lowSalesProducts.slice(0, 8)) {
        const salesCount = Math.floor(Math.random() * 5); // Mock sales count 0-4
        const suggestedDiscount = salesCount === 0 ? 20 : 15;

        suggestions.push({
          id: `low-sales-${product.id}`,
          type: 'PRODUCT_VOUCHER',
          priority: salesCount === 0 ? 'HIGH' : 'MEDIUM',
          title: `K√≠ch th√≠ch b√°n h√†ng: ${product.name}`,
          description: `S·∫£n ph·∫©m ch·ªâ c√≥ ${salesCount} ƒë∆°n h√†ng trong 30 ng√†y qua`,
          suggestedAction: `T·∫°o voucher gi·∫£m ${suggestedDiscount}% ƒë·ªÉ k√≠ch th√≠ch mua h√†ng`,
          data: {
            productId: product.id,
            productName: product.name,
            categoryId: product.categoryId,
            categoryName: 'Category Name', // Mock data
            currentStock: product.inStock,
            suggestedDiscount,
            reasoning: [
              `Ch·ªâ c√≥ ${salesCount} ƒë∆°n h√†ng trong 30 ng√†y`,
              `T·ªìn kho c√≤n ${product.inStock} s·∫£n ph·∫©m`,
              `C·∫ßn k√≠ch th√≠ch nhu c·∫ßu mua h√†ng`,
              `Gi·∫£m gi√° c√≥ th·ªÉ tƒÉng visibility c·ªßa s·∫£n ph·∫©m`
            ]
          }
        });
      }
    } catch (error) {
      console.error('Error analyzing low sales products:', error);
    }

    return suggestions;
  }

  // Ph√¢n t√≠ch danh m·ª•c c√≥ hi·ªáu su·∫•t th·∫•p
  private async analyzeLowPerformingCategories(): Promise<PromotionSuggestion[]> {
    const suggestions: PromotionSuggestion[] = [];

    try {
      const thirtyDaysAgo = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);

      // Mock data cho category analysis
      const categories = await prisma.category.findMany({
        take: 5
      });

      for (const category of categories) {
        // Mock sales data
        const totalSales = Math.floor(Math.random() * 20) + 5; // 5-25 sales
        const totalProducts = Math.floor(Math.random() * 10) + 5; // 5-15 products
        const avgSalesPerProduct = totalProducts > 0 ? totalSales / totalProducts : 0;

        // N·∫øu trung b√¨nh < 2 ƒë∆°n h√†ng/s·∫£n ph·∫©m trong 30 ng√†y
        if (avgSalesPerProduct < 2 && totalProducts > 3) {
          suggestions.push({
            id: `low-category-${category.id}`,
            type: 'CATEGORY_PROMOTION',
            priority: avgSalesPerProduct < 1 ? 'HIGH' : 'MEDIUM',
            title: `Khuy·∫øn m√£i danh m·ª•c: ${category.name}`,
            description: `Danh m·ª•c c√≥ hi·ªáu su·∫•t th·∫•p v·ªõi trung b√¨nh ${avgSalesPerProduct.toFixed(1)} ƒë∆°n h√†ng/s·∫£n ph·∫©m`,
            suggestedAction: `T·∫°o promotion gi·∫£m 15-20% cho to√†n b·ªô danh m·ª•c`,
            data: {
              categoryId: category.id,
              categoryName: category.name,
              suggestedDiscount: 18,
              reasoning: [
                `Trung b√¨nh ch·ªâ ${avgSalesPerProduct.toFixed(1)} ƒë∆°n h√†ng/s·∫£n ph·∫©m`,
                `T·ªïng ${totalSales} ƒë∆°n h√†ng cho ${totalProducts} s·∫£n ph·∫©m`,
                `C·∫ßn k√≠ch th√≠ch to√†n b·ªô danh m·ª•c`,
                `Promotion danh m·ª•c c√≥ th·ªÉ tƒÉng traffic t·ªïng th·ªÉ`
              ]
            }
          });
        }
      }
    } catch (error) {
      console.error('Error analyzing categories:', error);
    }

    return suggestions;
  }

  // T√≠nh ƒë·ªô ∆∞u ti√™n
  private calculatePriority(stock: number, daysWithoutSale: number): 'HIGH' | 'MEDIUM' | 'LOW' {
    if (stock > 100 && daysWithoutSale > 60) return 'HIGH';
    if (stock > 50 && daysWithoutSale > 30) return 'HIGH';
    if (stock > 30 && daysWithoutSale > 45) return 'MEDIUM';
    return 'LOW';
  }

  // S·∫Øp x·∫øp theo ƒë·ªô ∆∞u ti√™n
  private prioritizeSuggestions(suggestions: PromotionSuggestion[]): PromotionSuggestion[] {
    const priorityOrder = { HIGH: 3, MEDIUM: 2, LOW: 1 };

    return suggestions.sort((a, b) => {
      const priorityDiff = priorityOrder[b.priority] - priorityOrder[a.priority];
      if (priorityDiff !== 0) return priorityDiff;

      // N·∫øu c√πng priority, ∆∞u ti√™n theo stock cao h∆°n
      const stockA = a.data.currentStock || 0;
      const stockB = b.data.currentStock || 0;
      return stockB - stockA;
    });
  }

  // Test function ƒë·ªÉ ki·ªÉm tra engine
  public async testEngine(): Promise<void> {
    console.log('üß™ Testing Promotion Suggestion Engine...');
    const suggestions = await this.generateSuggestions();
    console.log(`Generated ${suggestions.length} suggestions for testing`);

    suggestions.forEach((suggestion, index) => {
      console.log(`${index + 1}. [${suggestion.priority}] ${suggestion.title}`);
    });
  }
}
