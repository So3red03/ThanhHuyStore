import prisma from './prismadb';

interface ReportData {
  totalOrders: number;
  totalRevenue: number;
  successfulOrders: number;
  lowStockProducts: any[];
  topProducts: any[];
  newCustomers: number;
  conversionRate: number;
  period: string;
}

export class DiscordReportService {
  private static DISCORD_WEBHOOK_URL = process.env.DISCORD_REPORT_WEBHOOK_URL || 
    'https://discord.com/api/webhooks/1385111738994655365/_ZsbRTu_u91HXI5oGXKKf9coRg0lGJjia6QB3y3R48hFNz8NfhOzeT7P0ixNKRg86lOd';

  // L·∫•y d·ªØ li·ªáu b√°o c√°o
  static async getReportData(hours: number = 24): Promise<ReportData> {
    const now = new Date();
    const startTime = new Date(now.getTime() - hours * 60 * 60 * 1000);

    try {
      // T·ªïng s·ªë ƒë∆°n h√†ng
      const totalOrders = await prisma.order.count({
        where: {
          createdDate: {
            gte: startTime
          }
        }
      });

      // T·ªïng doanh thu
      const revenueResult = await prisma.order.aggregate({
        where: {
          createdDate: {
            gte: startTime
          },
          status: {
            in: ['complete', 'dispatched']
          }
        },
        _sum: {
          amount: true
        }
      });

      // ƒê∆°n giao th√†nh c√¥ng
      const successfulOrders = await prisma.order.count({
        where: {
          createdDate: {
            gte: startTime
          },
          status: 'complete'
        }
      });

      // S·∫£n ph·∫©m s·∫Øp h·∫øt h√†ng (‚â§10)
      const lowStockProducts = await prisma.product.findMany({
        where: {
          inStock: {
            lte: 10,
            gt: 0
          }
        },
        select: {
          name: true,
          inStock: true
        },
        take: 5
      });

      // Top s·∫£n ph·∫©m b√°n ch·∫°y
      const topProducts = await prisma.orderItem.groupBy({
        by: ['productId'],
        where: {
          order: {
            createdDate: {
              gte: startTime
            }
          }
        },
        _sum: {
          quantity: true
        },
        orderBy: {
          _sum: {
            quantity: 'desc'
          }
        },
        take: 5
      });

      // L·∫•y th√¥ng tin chi ti·∫øt s·∫£n ph·∫©m
      const topProductsWithDetails = await Promise.all(
        topProducts.map(async (item) => {
          const product = await prisma.product.findUnique({
            where: { id: item.productId },
            select: { name: true }
          });
          return {
            name: product?.name || 'Unknown',
            quantity: item._sum.quantity || 0
          };
        })
      );

      // Kh√°ch h√†ng m·ªõi
      const newCustomers = await prisma.user.count({
        where: {
          createdAt: {
            gte: startTime
          },
          role: 'USER'
        }
      });

      // T·ª∑ l·ªá chuy·ªÉn ƒë·ªïi (ƒë∆°n th√†nh c√¥ng / t·ªïng ƒë∆°n)
      const conversionRate = totalOrders > 0 ? (successfulOrders / totalOrders) * 100 : 0;

      return {
        totalOrders,
        totalRevenue: revenueResult._sum.amount || 0,
        successfulOrders,
        lowStockProducts,
        topProducts: topProductsWithDetails,
        newCustomers,
        conversionRate: Math.round(conversionRate * 100) / 100,
        period: hours === 24 ? '24 gi·ªù qua' : `${hours} gi·ªù qua`
      };
    } catch (error) {
      console.error('Error getting report data:', error);
      throw error;
    }
  }

  // T·∫°o embed Discord
  static createDiscordEmbed(data: ReportData) {
    const formatCurrency = (amount: number) => {
      return new Intl.NumberFormat('vi-VN', {
        style: 'currency',
        currency: 'VND'
      }).format(amount);
    };

    return {
      embeds: [
        {
          title: `üìä B√°o c√°o kinh doanh - ${data.period}`,
          color: 0x00ff00, // Green color
          timestamp: new Date().toISOString(),
          fields: [
            {
              name: 'üõí T·ªïng ƒë∆°n h√†ng',
              value: data.totalOrders.toString(),
              inline: true
            },
            {
              name: 'üí∞ Doanh thu',
              value: formatCurrency(data.totalRevenue),
              inline: true
            },
            {
              name: '‚úÖ ƒê∆°n th√†nh c√¥ng',
              value: data.successfulOrders.toString(),
              inline: true
            },
            {
              name: 'üë• Kh√°ch h√†ng m·ªõi',
              value: data.newCustomers.toString(),
              inline: true
            },
            {
              name: 'üìà T·ª∑ l·ªá chuy·ªÉn ƒë·ªïi',
              value: `${data.conversionRate}%`,
              inline: true
            },
            {
              name: 'üî• Top s·∫£n ph·∫©m b√°n ch·∫°y',
              value: data.topProducts.length > 0 
                ? data.topProducts.map((p, i) => `${i + 1}. ${p.name} (${p.quantity})`).join('\n')
                : 'Kh√¥ng c√≥ d·ªØ li·ªáu',
              inline: false
            },
            {
              name: '‚ö†Ô∏è S·∫£n ph·∫©m s·∫Øp h·∫øt h√†ng',
              value: data.lowStockProducts.length > 0
                ? data.lowStockProducts.map(p => `‚Ä¢ ${p.name} (c√≤n ${p.inStock})`).join('\n')
                : 'T·∫•t c·∫£ s·∫£n ph·∫©m ƒë·ªÅu ƒë·ªß h√†ng',
              inline: false
            }
          ],
          footer: {
            text: 'ThanhHuy Store - H·ªá th·ªëng b√°o c√°o t·ª± ƒë·ªông',
            icon_url: 'https://cdn.discordapp.com/embed/avatars/0.png'
          }
        }
      ]
    };
  }

  // G·ª≠i b√°o c√°o qua Discord
  static async sendReport(hours: number = 24): Promise<boolean> {
    try {
      const reportData = await this.getReportData(hours);
      const embed = this.createDiscordEmbed(reportData);

      const response = await fetch(this.DISCORD_WEBHOOK_URL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(embed)
      });

      if (!response.ok) {
        throw new Error(`Discord webhook failed: ${response.status}`);
      }

      console.log(`‚úÖ B√°o c√°o ${hours}h ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng qua Discord`);
      return true;
    } catch (error) {
      console.error('‚ùå L·ªói g·ª≠i b√°o c√°o Discord:', error);
      return false;
    }
  }

  // Test g·ª≠i b√°o c√°o (cho admin test)
  static async sendTestReport(): Promise<boolean> {
    try {
      const testEmbed = {
        embeds: [
          {
            title: 'üß™ Test B√°o c√°o h·ªá th·ªëng',
            description: 'ƒê√¢y l√† tin nh·∫Øn test ƒë·ªÉ ki·ªÉm tra k·∫øt n·ªëi Discord webhook',
            color: 0x0099ff,
            timestamp: new Date().toISOString(),
            fields: [
              {
                name: '‚úÖ Tr·∫°ng th√°i',
                value: 'H·ªá th·ªëng ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng',
                inline: true
              },
              {
                name: 'üïê Th·ªùi gian',
                value: new Date().toLocaleString('vi-VN'),
                inline: true
              }
            ],
            footer: {
              text: 'ThanhHuy Store - Test Report',
              icon_url: 'https://cdn.discordapp.com/embed/avatars/0.png'
            }
          }
        ]
      };

      const response = await fetch(this.DISCORD_WEBHOOK_URL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(testEmbed)
      });

      return response.ok;
    } catch (error) {
      console.error('Test report failed:', error);
      return false;
    }
  }
}
