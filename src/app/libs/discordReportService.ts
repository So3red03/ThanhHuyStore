import prisma from './prismadb';

interface ReportData {
  totalOrders: number;
  totalRevenue: number;
  successfulOrders: number;
  lowStockProducts: any[];
  topProducts: any[];
  newCustomers: number;
  conversionRate: number;
  period: string;
}

export class DiscordReportService {
  private static DISCORD_ORDER_WEBHOOK_URL = process.env.DISCORD_REPORT_WEBHOOK_URL || '';

  // L·∫•y d·ªØ li·ªáu b√°o c√°o enhanced
  static async getReportData(hours: number = 24): Promise<
    ReportData & {
      cancelledOrders: number;
      pendingOrders: number;
      vouchersUsed: number;
      topViewedProducts: any[];
    }
  > {
    const now = new Date();
    const startTime = new Date(now.getTime() - hours * 60 * 60 * 1000);

    try {
      // T·ªïng s·ªë ƒë∆°n h√†ng
      const totalOrders = await prisma.order.count({
        where: {
          createDate: {
            gte: startTime
          }
        }
      });

      // T·ªïng doanh thu
      const revenueResult = await prisma.order.aggregate({
        where: {
          createDate: {
            gte: startTime
          },
          status: {
            in: ['completed', 'confirmed']
          }
        },
        _sum: {
          amount: true
        }
      });

      // ƒê∆°n giao th√†nh c√¥ng
      const successfulOrders = await prisma.order.count({
        where: {
          createDate: {
            gte: startTime
          },
          status: 'completed'
        }
      });

      // S·∫£n ph·∫©m s·∫Øp h·∫øt h√†ng (‚â§10)
      const lowStockProducts = await prisma.product.findMany({
        where: {
          inStock: {
            lte: 10,
            gt: 0
          }
        },
        select: {
          name: true,
          inStock: true
        },
        take: 5
      });

      // Top s·∫£n ph·∫©m b√°n ch·∫°y - s·ª≠ d·ª•ng Order v·ªõi products
      const topProductsData = await prisma.order.findMany({
        where: {
          createDate: {
            gte: startTime
          },
          status: {
            in: ['completed', 'confirmed']
          }
        },
        select: {
          products: {
            select: {
              id: true,
              name: true,
              quantity: true
            }
          }
        }
      });

      // T√≠nh t·ªïng quantity cho m·ªói s·∫£n ph·∫©m
      const productQuantityMap = new Map<string, { name: string; quantity: number }>();

      topProductsData.forEach(order => {
        order.products.forEach(product => {
          const existing = productQuantityMap.get(product.id);
          if (existing) {
            existing.quantity += product.quantity;
          } else {
            productQuantityMap.set(product.id, {
              name: product.name,
              quantity: product.quantity
            });
          }
        });
      });

      // S·∫Øp x·∫øp v√† l·∫•y top 5
      const topProductsWithDetails = Array.from(productQuantityMap.values())
        .sort((a, b) => b.quantity - a.quantity)
        .slice(0, 5);

      // Kh√°ch h√†ng m·ªõi
      const newCustomers = await prisma.user.count({
        where: {
          createAt: {
            gte: startTime
          },
          role: 'USER'
        }
      });

      // T·ª∑ l·ªá chuy·ªÉn ƒë·ªïi (ƒë∆°n th√†nh c√¥ng / t·ªïng ƒë∆°n)
      const conversionRate = totalOrders > 0 ? (successfulOrders / totalOrders) * 100 : 0;

      // ƒê∆°n b·ªã h·ªßy
      const cancelledOrders = await prisma.order.count({
        where: {
          createDate: {
            gte: startTime,
            lte: now
          },
          status: 'canceled'
        }
      });

      // ƒê∆°n ƒëang x·ª≠ l√Ω (pending + confirmed ch∆∞a giao)
      const pendingOrders = await prisma.order.count({
        where: {
          createDate: {
            gte: startTime,
            lte: now
          },
          status: {
            in: ['pending', 'confirmed']
          },
          deliveryStatus: {
            in: ['not_shipped', 'in_transit']
          }
        }
      });

      // Voucher ƒë√£ s·ª≠ d·ª•ng
      const vouchersUsed = await prisma.order.count({
        where: {
          createDate: {
            gte: startTime,
            lte: now
          },
          voucherId: {
            not: null
          }
        }
      });

      // Top s·∫£n ph·∫©m ƒë∆∞·ª£c xem nhi·ªÅu (t·ª´ analytics events)
      const topViewedProducts = await prisma.analyticsEvent.groupBy({
        by: ['entityId'],
        where: {
          eventType: 'PRODUCT_VIEW',
          timestamp: {
            gte: startTime,
            lte: now
          },
          entityId: {
            not: null
          }
        },
        _count: {
          id: true
        },
        orderBy: {
          _count: {
            id: 'desc'
          }
        },
        take: 5
      });

      // L·∫•y th√¥ng tin chi ti·∫øt s·∫£n ph·∫©m ƒë∆∞·ª£c xem nhi·ªÅu
      const topViewedProductsWithDetails = await Promise.all(
        topViewedProducts.map(async item => {
          const product = await prisma.product.findUnique({
            where: { id: item.entityId! },
            select: { name: true, price: true }
          });
          return {
            name: product?.name || 'Unknown Product',
            views: item._count.id,
            price: product?.price || 0
          };
        })
      );

      return {
        totalOrders,
        totalRevenue: revenueResult._sum?.amount || 0,
        successfulOrders,
        lowStockProducts,
        topProducts: topProductsWithDetails,
        newCustomers,
        conversionRate: Math.round(conversionRate * 100) / 100,
        period: hours === 24 ? '24 gi·ªù qua' : `${hours} gi·ªù qua`,
        // New fields
        cancelledOrders,
        pendingOrders,
        vouchersUsed,
        topViewedProducts: topViewedProductsWithDetails
      };
    } catch (error) {
      console.error('Error getting report data:', error);
      throw error;
    }
  }

  // Enhanced Discord embed - Business Owner & Analyst Perspective
  static createDiscordEmbed(data: any) {
    const formatCurrency = (amount: number) => {
      return new Intl.NumberFormat('vi-VN', {
        style: 'currency',
        currency: 'VND'
      }).format(amount);
    };

    // Calculate key business metrics
    const avgOrderValue = data.totalOrders > 0 ? data.totalRevenue / data.totalOrders : 0;
    const successRate = data.totalOrders > 0 ? (data.successfulOrders / data.totalOrders) * 100 : 0;
    const cancelRate = data.totalOrders > 0 ? (data.cancelledOrders / data.totalOrders) * 100 : 0;

    // Determine performance status and color
    const getPerformanceData = () => {
      if (data.totalRevenue > 50000000) return { emoji: 'üöÄ', color: 0x00ff00, status: 'XU·∫§T S·∫ÆC' };
      if (data.totalRevenue > 20000000) return { emoji: 'üìà', color: 0x32cd32, status: 'T·ªêT' };
      if (data.totalRevenue > 5000000) return { emoji: 'üìä', color: 0xffa500, status: 'TRUNG B√åNH' };
      return { emoji: '‚ö†Ô∏è', color: 0xff4500, status: 'C·∫¶N CH√ö √ù' };
    };

    const performance = getPerformanceData();

    return {
      embeds: [
        {
          title: `${performance.emoji} THANHHUSTORE - B√ÅO C√ÅO KINH DOANH`,
          description: `**${data.period.toUpperCase()}** | Hi·ªáu su·∫•t: **${
            performance.status
          }**\nüìÖ ${new Date().toLocaleDateString('vi-VN', {
            weekday: 'long',
            year: 'numeric',
            month: 'long',
            day: 'numeric'
          })}`,
          color: performance.color,
          timestamp: new Date().toISOString(),
          fields: [
            // CRITICAL BUSINESS METRICS - First Priority (Business Owner Focus)
            {
              name: 'üí∞ **DOANH THU T·ªîNG**',
              value: `**${formatCurrency(data.totalRevenue)}**\nüìä TB/ƒë∆°n: ${formatCurrency(avgOrderValue)}`,
              inline: true
            },
            {
              name: 'üì¶ **T·ªîNG ƒê∆†N H√ÄNG**',
              value: `**${data.totalOrders} ƒë∆°n**\n‚úÖ Th√†nh c√¥ng: ${data.successfulOrders} (${successRate.toFixed(
                1
              )}%)`,
              inline: true
            },
            {
              name: 'üìà **T·ª∂ L·ªÜ CHUY·ªÇN ƒê·ªîI**',
              value: `**${data.conversionRate}%**\nüë• KH m·ªõi: ${data.newCustomers} ng∆∞·ªùi`,
              inline: true
            },

            // ORDER STATUS ANALYSIS - Second Priority (Operations Focus)
            {
              name: '‚ùå **ƒê∆†N B·ªä H·ª¶Y**',
              value: `**${data.cancelledOrders} ƒë∆°n** (${cancelRate.toFixed(1)}%)`,
              inline: true
            },
            {
              name: '‚è≥ **ƒê∆†N ƒêANG X·ª¨ L√ù**',
              value: `**${data.pendingOrders} ƒë∆°n**`,
              inline: true
            },
            {
              name: 'üé´ **VOUCHER ƒê√É D√ôNG**',
              value: `**${data.vouchersUsed} l∆∞·ª£t**`,
              inline: true
            },

            // PRODUCT INSIGHTS - Third Priority (Marketing & Inventory Focus)
            {
              name: 'üëÅÔ∏è **S·∫¢N PH·∫®M ƒê∆Ø·ª¢C XEM NHI·ªÄU**',
              value:
                data.topViewedProducts && data.topViewedProducts.length > 0
                  ? data.topViewedProducts
                      .slice(0, 3)
                      .map((p: any, index: number) => `${index + 1}. **${p.name}** - ${p.views} l∆∞·ª£t xem`)
                      .join('\n')
                  : 'üìä Ch∆∞a c√≥ d·ªØ li·ªáu tracking',
              inline: false
            },
            {
              name: 'üèÜ **TOP S·∫¢N PH·∫®M B√ÅN CH·∫†Y**',
              value:
                data.topProducts.length > 0
                  ? data.topProducts
                      .slice(0, 3)
                      .map((p: any, index: number) => `${index + 1}. **${p.name}** - ${p.quantity} ƒë√£ b√°n`)
                      .join('\n')
                  : 'üìä Ch∆∞a c√≥ d·ªØ li·ªáu b√°n h√†ng',
              inline: false
            },
            {
              name: '‚ö†Ô∏è **C·∫¢NH B√ÅO T·ªíN KHO**',
              value:
                data.lowStockProducts.length > 0
                  ? `üö® **${data.lowStockProducts.length} s·∫£n ph·∫©m** s·∫Øp h·∫øt:\n` +
                    data.lowStockProducts
                      .slice(0, 3)
                      .map((p: any) => `‚Ä¢ **${p.name}**: ${p.inStock} c√≤n l·∫°i`)
                      .join('\n')
                  : '‚úÖ T·∫•t c·∫£ s·∫£n ph·∫©m ƒë·ªÅu ƒë·ªß h√†ng',
              inline: false
            }
          ],
          footer: {
            text: `ThanhHuyStore Analytics ‚Ä¢ C·∫≠p nh·∫≠t m·ªói ${data.period === '24 gi·ªù qua' ? '24h' : data.period}`,
            icon_url: 'https://cdn-icons-png.flaticon.com/512/3135/3135715.png'
          }
        }
      ]
    };
  }

  // G·ª≠i b√°o c√°o qua Discord
  static async sendReport(hours: number = 24): Promise<boolean> {
    try {
      const reportData = await this.getReportData(hours);
      const embed = this.createDiscordEmbed(reportData);

      const response = await fetch(this.DISCORD_ORDER_WEBHOOK_URL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(embed)
      });

      if (!response.ok) {
        throw new Error(`Discord webhook failed: ${response.status}`);
      }

      console.log(`‚úÖ B√°o c√°o ${hours}h ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng qua Discord`);
      return true;
    } catch (error) {
      console.error('‚ùå L·ªói g·ª≠i b√°o c√°o Discord:', error);
      return false;
    }
  }

  // Test g·ª≠i b√°o c√°o (cho admin test)
  static async sendTestReport(): Promise<boolean> {
    try {
      const testEmbed = {
        embeds: [
          {
            title: 'üß™ Test B√°o c√°o h·ªá th·ªëng',
            description: 'ƒê√¢y l√† tin nh·∫Øn test ƒë·ªÉ ki·ªÉm tra k·∫øt n·ªëi Discord webhook',
            color: 0x0099ff,
            timestamp: new Date().toISOString(),
            fields: [
              {
                name: '‚úÖ Tr·∫°ng th√°i',
                value: 'H·ªá th·ªëng ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng',
                inline: true
              },
              {
                name: 'üïê Th·ªùi gian',
                value: new Date().toLocaleString('vi-VN'),
                inline: true
              }
            ],
            footer: {
              text: 'ThanhHuy Store - Test Report',
              icon_url: 'https://cdn.discordapp.com/embed/avatars/0.png'
            }
          }
        ]
      };

      const response = await fetch(this.DISCORD_ORDER_WEBHOOK_URL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(testEmbed)
      });

      return response.ok;
    } catch (error) {
      console.error('Test report failed:', error);
      return false;
    }
  }
}
