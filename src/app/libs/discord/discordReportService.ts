import prisma from '../prismadb';

interface ReportData {
  totalOrders: number;
  totalRevenue: number;
  successfulOrders: number;
  lowStockProducts: any[];
  topProducts: any[];
  newCustomers: number;
  conversionRate: number;
  period: string;
}

export class DiscordReportService {
  private static DISCORD_ORDER_WEBHOOK_URL = process.env.DISCORD_REPORT_WEBHOOK_URL || '';

  // L·∫•y d·ªØ li·ªáu b√°o c√°o enhanced
  static async getReportData(hours: number = 24): Promise<
    ReportData & {
      cancelledOrders: number;
      pendingOrders: number;
      vouchersUsed: number;
      topViewedProducts: any[];
    }
  > {
    const now = new Date();
    const startTime = new Date(now.getTime() - hours * 60 * 60 * 1000);

    try {
      // T·ªïng s·ªë ƒë∆°n h√†ng
      const totalOrders = await prisma.order.count({
        where: {
          createdAt: {
            gte: startTime
          }
        }
      });

      // T·ªïng doanh thu
      const revenueResult = await prisma.order.aggregate({
        where: {
          createdAt: {
            gte: startTime
          },
          status: {
            in: ['completed', 'confirmed']
          }
        },
        _sum: {
          amount: true
        }
      });

      // ƒê∆°n h√†ng th√†nh c√¥ng
      const successfulOrders = await prisma.order.count({
        where: {
          createdAt: {
            gte: startTime
          },
          status: 'completed'
        }
      });

      // ƒê∆°n h√†ng b·ªã h·ªßy
      const cancelledOrders = await prisma.order.count({
        where: {
          createdAt: {
            gte: startTime
          },
          status: 'canceled'
        }
      });

      // ƒê∆°n h√†ng ƒëang ch·ªù
      const pendingOrders = await prisma.order.count({
        where: {
          createdAt: {
            gte: startTime
          },
          status: 'pending'
        }
      });

      // S·∫£n ph·∫©m s·∫Øp h·∫øt h√†ng (stock < 10)
      const lowStockProducts = await prisma.product.findMany({
        where: {
          inStock: {
            lt: 10
          }
        },
        select: {
          name: true,
          inStock: true
        },
        take: 5
      });

      // Top s·∫£n ph·∫©m b√°n ch·∫°y (mock data v√¨ orderItem table ch∆∞a c√≥)
      const topProductsWithDetails = [
        { name: 'S·∫£n ph·∫©m A', quantity: 25 },
        { name: 'S·∫£n ph·∫©m B', quantity: 20 },
        { name: 'S·∫£n ph·∫©m C', quantity: 15 },
        { name: 'S·∫£n ph·∫©m D', quantity: 12 },
        { name: 'S·∫£n ph·∫©m E', quantity: 10 }
      ];

      // Kh√°ch h√†ng m·ªõi
      const newCustomers = await prisma.user.count({
        where: {
          createAt: {
            gte: startTime
          }
        }
      });

      // Voucher ƒë∆∞·ª£c s·ª≠ d·ª•ng
      const vouchersUsed = await prisma.order.count({
        where: {
          createdAt: {
            gte: startTime
          },
          discountAmount: {
            gt: 0
          }
        }
      });

      // Top s·∫£n ph·∫©m ƒë∆∞·ª£c xem nhi·ªÅu (mock data v√¨ ch∆∞a c√≥ analytics table)
      const topViewedProducts = [
        { name: 'S·∫£n ph·∫©m A', views: 150 },
        { name: 'S·∫£n ph·∫©m B', views: 120 },
        { name: 'S·∫£n ph·∫©m C', views: 100 }
      ];

      const totalRevenue = revenueResult._sum?.amount || 0;
      const conversionRate = totalOrders > 0 ? (successfulOrders / totalOrders) * 100 : 0;

      return {
        totalOrders,
        totalRevenue,
        successfulOrders,
        cancelledOrders,
        pendingOrders,
        lowStockProducts,
        topProducts: topProductsWithDetails,
        topViewedProducts,
        newCustomers,
        vouchersUsed,
        conversionRate,
        period: `${hours}h`
      };
    } catch (error) {
      console.error('Error getting report data:', error);
      throw error;
    }
  }

  // T·∫°o embed Discord cho b√°o c√°o
  static createReportEmbed(
    data: ReportData & {
      cancelledOrders: number;
      pendingOrders: number;
      vouchersUsed: number;
      topViewedProducts: any[];
    }
  ) {
    const embed = {
      title: 'üìä B√°o c√°o kinh doanh ThanhHuyStore',
      description: `B√°o c√°o ${data.period} - ${new Date().toLocaleString('vi-VN')}`,
      color: 0x3b82f6,
      fields: [
        {
          name: 'üí∞ Doanh thu',
          value: `${data.totalRevenue.toLocaleString()} VND`,
          inline: true
        },
        {
          name: 'üì¶ T·ªïng ƒë∆°n h√†ng',
          value: data.totalOrders.toString(),
          inline: true
        },
        {
          name: '‚úÖ ƒê∆°n th√†nh c√¥ng',
          value: data.successfulOrders.toString(),
          inline: true
        },
        {
          name: '‚ùå ƒê∆°n b·ªã h·ªßy',
          value: data.cancelledOrders.toString(),
          inline: true
        },
        {
          name: '‚è≥ ƒê∆°n ch·ªù x·ª≠ l√Ω',
          value: data.pendingOrders.toString(),
          inline: true
        },
        {
          name: 'üéüÔ∏è Voucher s·ª≠ d·ª•ng',
          value: data.vouchersUsed.toString(),
          inline: true
        },
        {
          name: 'üë• Kh√°ch h√†ng m·ªõi',
          value: data.newCustomers.toString(),
          inline: true
        },
        {
          name: 'üìà T·ª∑ l·ªá chuy·ªÉn ƒë·ªïi',
          value: `${data.conversionRate.toFixed(1)}%`,
          inline: true
        }
      ],
      timestamp: new Date().toISOString()
    };

    // Th√™m s·∫£n ph·∫©m b√°n ch·∫°y
    if (data.topProducts.length > 0) {
      embed.fields.push({
        name: 'üî• Top s·∫£n ph·∫©m b√°n ch·∫°y',
        value:
          data.topProducts.map((p, i) => `${i + 1}. ${p.name} (${p.quantity} sp)`).join('\n') || 'Kh√¥ng c√≥ d·ªØ li·ªáu',
        inline: false
      });
    }

    // Th√™m s·∫£n ph·∫©m s·∫Øp h·∫øt h√†ng
    if (data.lowStockProducts.length > 0) {
      embed.fields.push({
        name: '‚ö†Ô∏è S·∫£n ph·∫©m s·∫Øp h·∫øt h√†ng',
        value: data.lowStockProducts.map(p => `‚Ä¢ ${p.name} (c√≤n ${p.inStock})`).join('\n'),
        inline: false
      });
    }

    // Th√™m s·∫£n ph·∫©m ƒë∆∞·ª£c xem nhi·ªÅu
    if (data.topViewedProducts.length > 0) {
      embed.fields.push({
        name: 'üëÄ S·∫£n ph·∫©m ƒë∆∞·ª£c xem nhi·ªÅu',
        value: data.topViewedProducts.map((p, i) => `${i + 1}. ${p.name} (${p.views} l∆∞·ª£t xem)`).join('\n'),
        inline: false
      });
    }

    return embed;
  }

  // G·ª≠i b√°o c√°o qua Discord
  static async sendReport(hours: number = 24): Promise<void> {
    try {
      // Ki·ªÉm tra xem Discord reports c√≥ ƒë∆∞·ª£c b·∫≠t kh√¥ng
      const settings = await prisma.adminSettings.findFirst();
      if (!settings?.dailyReports) {
        return;
      }

      if (!this.DISCORD_ORDER_WEBHOOK_URL) {
        return;
      }

      const reportData = await this.getReportData(hours);
      const embed = this.createReportEmbed(reportData);

      const response = await fetch(this.DISCORD_ORDER_WEBHOOK_URL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          embeds: [embed]
        })
      });

      if (!response.ok) {
        throw new Error(`Discord webhook failed: ${response.status} ${response.statusText}`);
      }
    } catch (error: any) {
      throw new Error('Error sending Discord report');
    }
  }
}
