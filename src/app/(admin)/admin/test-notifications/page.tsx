'use client';

import React, { useState } from 'react';
import { Box, Button, Typography, Paper, Grid } from '@mui/material';
import NotificationPanel from '@/app/components/admin/NotificationPanel';
import MessageToast from '@/app/components/admin/MessageToast';

const NotificationTestPage = () => {
  const [notifications, setNotifications] = useState<any[]>([]);
  const [messages, setMessages] = useState<any[]>([]);

  const mockNotifications = [
    {
      id: '1',
      type: 'ORDER_PLACED' as const,
      title: 'ƒê∆°n h√†ng m·ªõi',
      message: 'Kh√°ch h√†ng Nguy·ªÖn VƒÉn A v·ª´a ƒë·∫∑t ƒë∆°n h√†ng #12345 v·ªõi t·ªïng gi√° tr·ªã 2.500.000ƒë',
      avatar: '/no-avatar-2.jpg',
      timestamp: new Date(Date.now() - 5 * 60 * 1000), // 5 minutes ago
      data: { orderId: '12345' },
      isRead: false
    },
    {
      id: '2',
      type: 'LOW_STOCK' as const,
      title: 'C·∫£nh b√°o t·ªìn kho',
      message: 'S·∫£n ph·∫©m iPhone 15 Pro s·∫Øp h·∫øt h√†ng (c√≤n 2 s·∫£n ph·∫©m)',
      timestamp: new Date(Date.now() - 30 * 60 * 1000), // 30 minutes ago
      data: { productId: 'iphone15' },
      isRead: false
    },
    {
      id: '3',
      type: 'COMMENT_RECEIVED' as const,
      title: 'B√¨nh lu·∫≠n m·ªõi',
      message: 'C√≥ b√¨nh lu·∫≠n m·ªõi tr√™n b√†i vi·∫øt "H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng s·∫£n ph·∫©m"',
      avatar: '/no-avatar-2.jpg',
      timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000), // 2 hours ago
      data: { articleId: 'article123' },
      isRead: true
    },
    {
      id: '4',
      type: 'ORDER_PLACED' as const,
      title: 'ƒê∆°n h√†ng m·ªõi',
      message: 'Kh√°ch h√†ng Tr·∫ßn Th·ªã B v·ª´a ƒë·∫∑t ƒë∆°n h√†ng #12346',
      avatar: '/no-avatar-2.jpg',
      timestamp: new Date(Date.now() - 4 * 60 * 60 * 1000), // 4 hours ago
      data: { orderId: '12346' },
      isRead: true
    }
  ];

  const testNotifications = () => {
    setNotifications(mockNotifications);
  };

  const testMessages = () => {
    const mockMessages = [
      {
        id: '1',
        senderName: 'Duc Tri Nguyen',
        content: 'Ch√†o admin, t√¥i mu·ªën h·ªèi v·ªÅ s·∫£n ph·∫©m n√†y',
        avatar: '/no-avatar-2.jpg',
        timestamp: new Date(Date.now() - 13 * 60 * 1000), // 13 minutes ago
        hasImage: false,
        chatroomId: 'chat1',
        isRead: false
      },
      {
        id: '2',
        senderName: 'Qu·ª≥nh Trang',
        content: 'M·∫´u ƒë·ªè CD b·∫°n ∆°i',
        avatar: '/no-avatar-2.jpg',
        timestamp: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000), // 2 days ago
        hasImage: false,
        chatroomId: 'chat2',
        isRead: false
      },
      {
        id: '3',
        senderName: 'Tr·∫ßn Th·ªã Ng·ªçc Tuy·ªÅn',
        content: 'Nghe ch·ªß m√† ƒëi·ªÉm kh th·∫•p t chiu...',
        avatar: '/no-avatar-2.jpg',
        timestamp: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000), // 2 days ago
        hasImage: false,
        chatroomId: 'chat3',
        isRead: true
      },
      {
        id: '4',
        senderName: 'KHI N√ÄO CAFE?',
        content: 'B·∫°n: ƒêi l√†m r em ∆°i',
        avatar: '/no-avatar-2.jpg',
        timestamp: new Date(Date.now() - 4 * 24 * 60 * 60 * 1000), // 4 days ago
        hasImage: true,
        chatroomId: 'chat4',
        isRead: true
      },
      {
        id: '5',
        senderName: 'Anh Thong',
        content: 'Tin nh·∫Øn v√† cu·ªôc g·ªçi ƒë∆∞·ª£c b·∫£o m√£...',
        avatar: '/no-avatar-2.jpg',
        timestamp: new Date(Date.now() - 4 * 24 * 60 * 60 * 1000), // 4 days ago
        hasImage: false,
        chatroomId: 'chat5',
        isRead: true
      }
    ];

    setMessages(mockMessages);
  };

  return (
    <Box sx={{ p: 4 }}>
      <Typography variant='h4' gutterBottom>
        üß™ Notification System Test
      </Typography>

      <Typography variant='body1' sx={{ mb: 4, color: 'text.secondary' }}>
        Test h·ªá th·ªëng notification v·ªõi 2 component ch√≠nh: NotificationToast v√† MessageToast
      </Typography>

      <Grid container spacing={3}>
        {/* Notification Tests */}
        <Grid item xs={12} md={6}>
          <Paper sx={{ p: 3 }}>
            <Typography variant='h6' gutterBottom>
              üì¢ Notification Panel Tests
            </Typography>

            <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>
              <Button variant='contained' color='primary' onClick={testNotifications} sx={{ py: 2 }}>
                Test Notification Panel
              </Button>

              <Button variant='outlined' onClick={() => setNotifications([])}>
                Clear Notifications
              </Button>
            </Box>

            <Typography variant='body2' sx={{ mt: 2, color: 'text.secondary' }}>
              Hi·ªÉn th·ªã panel notification nh∆∞ Facebook:
              <br />‚Ä¢ Danh s√°ch c√°c th√¥ng b√°o
              <br />‚Ä¢ ƒê∆°n h√†ng m·ªõi (xanh d∆∞∆°ng)
              <br />‚Ä¢ C·∫£nh b√°o t·ªìn kho (cam)
              <br />‚Ä¢ B√¨nh lu·∫≠n m·ªõi (t√≠m)
              <br />‚Ä¢ Click v√†o t·ª´ng notification ƒë·ªÉ navigate
            </Typography>
          </Paper>
        </Grid>

        {/* Message Tests */}
        <Grid item xs={12} md={6}>
          <Paper sx={{ p: 3 }}>
            <Typography variant='h6' gutterBottom>
              üí¨ Message Toast Tests
            </Typography>

            <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>
              <Button variant='contained' color='success' onClick={testMessages} sx={{ py: 2 }}>
                Test Message Toast
              </Button>

              <Button variant='outlined' onClick={() => setMessages([])}>
                Clear Messages
              </Button>
            </Box>

            <Typography variant='body2' sx={{ mt: 2, color: 'text.secondary' }}>
              Hi·ªÉn th·ªã danh s√°ch tin nh·∫Øn v·ªõi design xanh l√°:
              <br />‚Ä¢ Avatar + online status
              <br />‚Ä¢ T√™n ng∆∞·ªùi g·ª≠i + th·ªùi gian
              <br />‚Ä¢ Preview tin nh·∫Øn
              <br />‚Ä¢ Unread indicators
            </Typography>
          </Paper>
        </Grid>
      </Grid>

      {/* Toast Components */}
      <NotificationPanel
        notifications={notifications}
        onClose={() => setNotifications([])}
        onNotificationClick={notification => {
          console.log('Navigate to:', notification);
          alert(`Navigate to: ${notification.type} - ${notification.title}`);
        }}
        duration={12000} // 12 seconds for testing
      />

      <MessageToast
        messages={messages}
        onClose={() => setMessages([])}
        onMessageClick={chatroomId => {
          console.log('Navigate to chat:', chatroomId);
          alert(`Navigate to chat: ${chatroomId}`);
        }}
        duration={15000} // 15 seconds for testing
      />
    </Box>
  );
};

export default NotificationTestPage;
