import axios from 'axios';

/**
 * Utility function ƒë·ªÉ g·ª≠i email t·ª± ƒë·ªông khi c√≥ s·∫£n ph·∫©m m·ªõi
 * T√°i s·ª≠ d·ª•ng logic t·ª´ SendNewProductEmail.tsx
 */
export const sendNewProductEmailAutomatically = async (productId: string): Promise<boolean> => {
  try {
    console.log(`üöÄ [Auto Email] Checking if auto email is enabled for new product: ${productId}`);

    // 1. Ki·ªÉm tra xem auto email marketing c√≥ ƒë∆∞·ª£c b·∫≠t kh√¥ng v√† c√≥ ph·∫£i l√† mode "newProduct"
    const settingsResponse = await axios.get('/api/admin/settings');
    const settings = settingsResponse.data.settings;

    if (!settings.autoEmailMarketing) {
      console.log('üìß [Auto Email] Auto email marketing is disabled');
      return false;
    }

    // Ch·ªâ g·ª≠i email t·ª± ƒë·ªông khi setting l√† "newProduct" ho·∫∑c "daily"
    if (settings.emailMarketingSchedule !== 'newProduct' && settings.emailMarketingSchedule !== 'daily') {
      console.log(
        `üìß [Auto Email] Email schedule is "${settings.emailMarketingSchedule}", auto email disabled for new products`
      );
      return false;
    }

    console.log(`üìß [Auto Email] Email schedule is "${settings.emailMarketingSchedule}", proceeding with auto email`);

    console.log('‚úÖ [Auto Email] Auto email marketing is enabled for new products');

    // 2. G·ª≠i email t·ª± ƒë·ªông (s·ª≠ d·ª•ng API endpoint m·ªõi v·ªõi category filtering)
    console.log('üìß [Auto Email] Sending email request to API...');
    const emailResponse = await axios.post('/api/marketing/emails', {
      campaignType: 'NEW_PRODUCT',
      campaignTitle: 'S·∫£n ph·∫©m m·ªõi v·ª´a ra m·∫Øt!',
      campaignDescription: 'Kh√°m ph√° s·∫£n ph·∫©m m·ªõi nh·∫•t t·ª´ ThanhHuy Store',
      productId: productId,
      selectedSegments: ['category_interested'], // G·ª≠i cho kh√°ch h√†ng ƒë√£ mua c√πng danh m·ª•c
      manualMode: false, // Kh√¥ng ph·∫£i manual mode
      selectedUserIds: [],
      debugMode: true
    });

    console.log('üìß [Auto Email] API Response:', emailResponse.data);

    const result = emailResponse.data;
    console.log(`üìß [Auto Email] Successfully sent emails to ${result.sentCount}/${result.totalUsers} users`);

    return true;
  } catch (error: any) {
    console.error('‚ùå [Auto Email] Error sending automatic emails:', error);

    // Log chi ti·∫øt l·ªói nh∆∞ng kh√¥ng throw ƒë·ªÉ kh√¥ng ·∫£nh h∆∞·ªüng ƒë·∫øn vi·ªác t·∫°o s·∫£n ph·∫©m
    if (error.response?.data?.error) {
      console.error('‚ùå [Auto Email] API Error:', error.response.data.error);
    }

    return false;
  }
};

/**
 * Wrapper function ƒë·ªÉ g·ªçi t·ª´ component v·ªõi error handling
 */
export const triggerNewProductEmail = async (productId: string, productName: string) => {
  try {
    const success = await sendNewProductEmailAutomatically(productId);

    if (success) {
      // C√≥ th·ªÉ hi·ªÉn th·ªã toast success n·∫øu c·∫ßn
      console.log(`‚úÖ [Auto Email] Auto email sent for product: ${productName}`);
    }
  } catch (error) {
    // Silent fail - kh√¥ng ·∫£nh h∆∞·ªüng ƒë·∫øn UX c·ªßa vi·ªác t·∫°o s·∫£n ph·∫©m
    console.error(`‚ùå [Auto Email] Failed to send auto email for product: ${productName}`, error);
  }
};
