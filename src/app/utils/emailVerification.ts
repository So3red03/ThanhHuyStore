import prisma from '../libs/prismadb';
import crypto from 'crypto';
const nodemailer = require('nodemailer');

export interface EmailVerificationResult {
  success: boolean;
  message: string;
  error?: string;
}

/**
 * G·ª≠i email x√°c th·ª±c cho user
 * @param email - Email c·ªßa user
 * @param token - Token x√°c th·ª±c
 * @param userName - T√™n user
 * @returns Promise<EmailVerificationResult>
 */
export async function sendVerificationEmail(
  email: string, 
  token: string, 
  userName: string
): Promise<EmailVerificationResult> {
  try {
    // C·∫•u h√¨nh transporter (match v·ªõi create-payment-intent)
    const transporter = nodemailer.createTransport({
      host: 'smtp.gmail.com',
      port: 587,
      secure: false,
      service: 'gmail',
      auth: {
        user: process.env.GMAIL_USER,
        pass: process.env.GMAIL_PASS
      }
    });

    const verificationLink = `${
      process.env.NEXTAUTH_URL || 'http://localhost:3000'
    }/api/auth/verify-email?token=${token}`;

    const htmlTemplate = `
      <!DOCTYPE html>
      <html lang="vi">
      <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>X√°c th·ª±c email - ThanhHuy Store</title>
        <style>
          body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; line-height: 1.6; color: #333; background-color: #f4f4f4; margin: 0; padding: 0; }
          .container { max-width: 600px; margin: 0 auto; background-color: #ffffff; border-radius: 10px; overflow: hidden; box-shadow: 0 0 20px rgba(0,0,0,0.1); }
          .header { background: linear-gradient(135deg, #0066CC, #004499); color: white; padding: 30px; text-align: center; }
          .header h1 { margin: 0; font-size: 28px; font-weight: 300; }
          .content { padding: 40px 30px; }
          .content h2 { color: #333; margin-bottom: 20px; font-size: 24px; }
          .content p { margin-bottom: 20px; font-size: 16px; }
          .button { display: inline-block; background: linear-gradient(135deg, #0066CC, #004499); color: white; padding: 15px 30px; text-decoration: none; border-radius: 5px; font-weight: bold; margin: 20px 0; transition: all 0.3s ease; }
          .button:hover { transform: translateY(-2px); box-shadow: 0 5px 15px rgba(0,102,204,0.4); }
          .info-box { background-color: #f8f9fa; border-left: 4px solid #0066CC; padding: 20px; margin: 20px 0; border-radius: 5px; }
          .footer { background-color: #f8f9fa; padding: 20px; text-align: center; font-size: 14px; color: #666; }
          .warning { color: #e74c3c; font-weight: bold; }
        </style>
      </head>
      <body>
        <div class="container">
          <div class="header">
            <h1>üõçÔ∏è ThanhHuy Store</h1>
          </div>
          <div class="content">
            <h2>X√°c th·ª±c t√†i kho·∫£n c·ªßa b·∫°n</h2>
            <p>Xin ch√†o <strong>${userName}</strong>,</p>
            <p>C·∫£m ∆°n b·∫°n ƒë√£ ƒëƒÉng k√Ω t√†i kho·∫£n t·∫°i ThanhHuy Store! ƒê·ªÉ ho√†n t·∫•t qu√° tr√¨nh ƒëƒÉng k√Ω, vui l√≤ng x√°c th·ª±c ƒë·ªãa ch·ªâ email c·ªßa b·∫°n.</p>
            
            <div style="text-align: center;">
              <a href="${verificationLink}" class="button">‚úÖ X√°c th·ª±c email ngay</a>
            </div>
            
            <div class="info-box">
              <p><strong>üìã L∆∞u √Ω quan tr·ªçng:</strong></p>
              <ul>
                <li>Link x√°c th·ª±c s·∫Ω <span class="warning">h·∫øt h·∫°n sau 5 ph√∫t</span></li>
                <li>N·∫øu kh√¥ng th·∫•y email, vui l√≤ng ki·ªÉm tra th∆∞ m·ª•c spam/junk</li>
                <li>B·∫°n c·∫ßn x√°c th·ª±c email tr∆∞·ªõc khi ƒëƒÉng nh·∫≠p</li>
              </ul>
            </div>
            
            <p>N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu t·∫°o t√†i kho·∫£n n√†y, vui l√≤ng b·ªè qua email n√†y.</p>
            
            <p>Tr√¢n tr·ªçng,<br><strong>ƒê·ªôi ng≈© ThanhHuy Store</strong></p>
          </div>
          <div class="footer">
            <p>¬© 2024 ThanhHuy Store. T·∫•t c·∫£ quy·ªÅn ƒë∆∞·ª£c b·∫£o l∆∞u.</p>
            <p>Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông, vui l√≤ng kh√¥ng tr·∫£ l·ªùi.</p>
          </div>
        </div>
      </body>
      </html>
    `;

    const mailOptions = {
      from: process.env.GMAIL_USER,
      to: email,
      subject: '‚úÖ X√°c th·ª±c t√†i kho·∫£n - ThanhHuy Store',
      text: `X√°c th·ª±c t√†i kho·∫£n ThanhHuy Store\n\nXin ch√†o ${userName},\n\nC·∫£m ∆°n b·∫°n ƒë√£ ƒëƒÉng k√Ω t√†i kho·∫£n t·∫°i ThanhHuy Store!\n\nVui l√≤ng nh·∫•p v√†o link sau ƒë·ªÉ x√°c th·ª±c email: ${verificationLink}\n\nL∆∞u √Ω: Link n√†y s·∫Ω h·∫øt h·∫°n sau 5 ph√∫t.\n\nN·∫øu b·∫°n kh√¥ng y√™u c·∫ßu t·∫°o t√†i kho·∫£n n√†y, vui l√≤ng b·ªè qua email n√†y.\n\nTr√¢n tr·ªçng,\nThanhHuy Store`,
      html: htmlTemplate
    };

    // G·ª≠i email (kh√¥ng d√πng await nh∆∞ create-payment-intent)
    return new Promise((resolve) => {
      transporter.sendMail(mailOptions, (error: any, info: any) => {
        if (error) {
          console.error('L·ªói khi g·ª≠i email x√°c th·ª±c:', error);
          resolve({
            success: false,
            message: 'C√≥ l·ªói khi g·ª≠i email x√°c th·ª±c',
            error: error.message
          });
        } else {
          console.log(`Verification email sent to ${email}:`, info.response);
          resolve({
            success: true,
            message: 'Email x√°c th·ª±c ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng'
          });
        }
      });
    });
  } catch (error) {
    console.error('L·ªói khi g·ª≠i email x√°c th·ª±c:', error);
    return {
      success: false,
      message: 'G·ª≠i email th·∫•t b·∫°i',
      error: error instanceof Error ? error.message : 'Unknown error'
    };
  }
}

/**
 * T·∫°o v√† c·∫≠p nh·∫≠t token x√°c th·ª±c cho user
 * @param email - Email c·ªßa user
 * @param isResend - C√≥ ph·∫£i l√† resend kh√¥ng (ƒë·ªÉ check rate limiting)
 * @returns Promise<{token: string, user: any} | null>
 */
export async function createVerificationToken(email: string, isResend: boolean = false) {
  try {
    // T√¨m user v·ªõi email n√†y
    const existingUser = await prisma.user.findUnique({
      where: { email }
    });

    if (!existingUser) {
      throw new Error('Email kh√¥ng t·ªìn t·∫°i');
    }

    // Ki·ªÉm tra n·∫øu email ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c
    if (existingUser.emailVerified) {
      throw new Error('Email ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c');
    }

    // Ki·ªÉm tra rate limiting cho resend (1 ph√∫t)
    if (isResend && existingUser.emailVerificationExpires) {
      const now = new Date();
      const lastSent = new Date(existingUser.emailVerificationExpires.getTime() - 5 * 60 * 1000); // 5 ph√∫t tr∆∞·ªõc expiry
      const timeDiff = now.getTime() - lastSent.getTime();
      const oneMinute = 60 * 1000;

      if (timeDiff < oneMinute) {
        const remainingSeconds = Math.ceil((oneMinute - timeDiff) / 1000);
        throw new Error(`Vui l√≤ng ƒë·ª£i ${remainingSeconds} gi√¢y tr∆∞·ªõc khi g·ª≠i l·∫°i email`);
      }
    }

    // T·∫°o token x√°c th·ª±c m·ªõi
    const token = crypto.randomBytes(32).toString('hex');
    const expires = new Date();
    expires.setMinutes(expires.getMinutes() + 5); // Token h·∫øt h·∫°n sau 5 ph√∫t

    // C·∫≠p nh·∫≠t user v·ªõi token x√°c th·ª±c m·ªõi
    const updatedUser = await prisma.user.update({
      where: { email },
      data: {
        emailVerificationToken: token,
        emailVerificationExpires: expires
      }
    });

    return { token, user: updatedUser };
  } catch (error) {
    console.error('L·ªói khi t·∫°o verification token:', error);
    throw error;
  }
}
